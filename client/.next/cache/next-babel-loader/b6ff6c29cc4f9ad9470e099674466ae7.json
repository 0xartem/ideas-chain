{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { getInstance } from './contract-instance';\nimport IdeaStorage from './artifacts/IdeaStorage.json';\nimport IdeaController from './artifacts/IdeaController.json';\nexport var getIdea = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(web3, ideaId) {\n    var storage, idea;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getInstance(web3.currentProvider, IdeaStorage);\n\n          case 2:\n            storage = _context.sent;\n            _context.next = 5;\n            return storage.ideas.call(ideaId);\n\n          case 5:\n            idea = _context.sent;\n            return _context.abrupt(\"return\", {\n              id: parseInt(idea.id),\n              text: idea.text,\n              userId: parseInt(idea.userId),\n              postedAt: parseInt(idea.postedAt)\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getIdea(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createIdea = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(web3, userId, text) {\n    var controller, addresses, result;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getInstance(web3.currentProvider, IdeaController);\n\n          case 2:\n            controller = _context2.sent;\n            _context2.prev = 3;\n            _context2.next = 6;\n            return web3.eth.getAccounts();\n\n          case 6:\n            addresses = _context2.sent;\n            _context2.next = 9;\n            return controller.createIdea(userId, text, {\n              from: addresses[0]\n            });\n\n          case 9:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.error(\"Err: \", _context2.t0);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 13]]);\n  }));\n\n  return function createIdea(_x3, _x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/ideas.js"],"names":["getInstance","IdeaStorage","IdeaController","getIdea","web3","ideaId","currentProvider","storage","ideas","call","idea","id","parseInt","text","userId","postedAt","createIdea","controller","eth","getAccounts","addresses","from","result","console","error"],"mappings":";;;;AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,OAAO,IAAMC,OAAO;AAAA,qEAAG,iBAAOC,IAAP,EAAaC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCL,WAAW,CAACI,IAAI,CAACE,eAAN,EAAuBL,WAAvB,CADZ;;AAAA;AACfM,YAAAA,OADe;AAAA;AAAA,mBAEFA,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBJ,MAAnB,CAFE;;AAAA;AAEfK,YAAAA,IAFe;AAAA,6CAGd;AACLC,cAAAA,EAAE,EAAEC,QAAQ,CAACF,IAAI,CAACC,EAAN,CADP;AAELE,cAAAA,IAAI,EAAEH,IAAI,CAACG,IAFN;AAGLC,cAAAA,MAAM,EAAEF,QAAQ,CAACF,IAAI,CAACI,MAAN,CAHX;AAILC,cAAAA,QAAQ,EAAEH,QAAQ,CAACF,IAAI,CAACK,QAAN;AAJb,aAHc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAPZ,OAAO;AAAA;AAAA;AAAA,GAAb;AAWP,OAAO,IAAMa,UAAU;AAAA,sEAAG,kBAAOZ,IAAP,EAAaU,MAAb,EAAqBD,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCb,WAAW,CAACI,IAAI,CAACE,eAAN,EAAuBJ,cAAvB,CADZ;;AAAA;AAClBe,YAAAA,UADkB;AAAA;AAAA;AAAA,mBAGEb,IAAI,CAACc,GAAL,CAASC,WAAT,EAHF;;AAAA;AAGhBC,YAAAA,SAHgB;AAAA;AAAA,mBAIDH,UAAU,CAACD,UAAX,CAAsBF,MAAtB,EAA8BD,IAA9B,EAAoC;AAAEQ,cAAAA,IAAI,EAAED,SAAS,CAAC,CAAD;AAAjB,aAApC,CAJC;;AAAA;AAIhBE,YAAAA,MAJgB;AAAA,8CAKfA,MALe;;AAAA;AAAA;AAAA;AAOtBC,YAAAA,OAAO,CAACC,KAAR,CAAc,OAAd;;AAPsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVR,UAAU;AAAA;AAAA;AAAA,GAAhB","sourcesContent":["import { getInstance } from './contract-instance'\nimport IdeaStorage from './artifacts/IdeaStorage.json'\nimport IdeaController from './artifacts/IdeaController.json'\n\nexport const getIdea = async (web3, ideaId) => {\n  const storage = await getInstance(web3.currentProvider, IdeaStorage)\n  const idea = await storage.ideas.call(ideaId)\n  return {\n    id: parseInt(idea.id),\n    text: idea.text,\n    userId: parseInt(idea.userId),\n    postedAt: parseInt(idea.postedAt)\n  }\n}\n\nexport const createIdea = async (web3, userId, text) => {\n  const controller = await getInstance(web3.currentProvider, IdeaController)\n  try {\n    const addresses = await web3.eth.getAccounts()\n    const result = await controller.createIdea(userId, text, { from: addresses[0] })\n    return result\n  } catch (err) {\n    console.error(\"Err: \", err)\n  }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/daelankane/code/ed/ether/ideas-chain/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getInstance } from './contract-instance';\nimport UserStorage from './artifacts/UserStorage.json';\nimport UserController from \"./artifacts/UserController.json\";\nexport var getUserInfo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(web3, userId) {\n    var storage, profile, id, username, firstName, lastName, bio, gravatarEmail;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getInstance(web3.currentProvider, UserStorage);\n\n          case 2:\n            storage = _context.sent;\n            _context.next = 5;\n            return storage.profiles.call(userId);\n\n          case 5:\n            profile = _context.sent;\n            id = profile.id, username = profile.username, firstName = profile.firstName, lastName = profile.lastName, bio = profile.bio, gravatarEmail = profile.gravatarEmail;\n\n            if (parseInt(id)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw \"Couldn't find user!\";\n\n          case 9:\n            return _context.abrupt(\"return\", {\n              id: parseInt(id),\n              username: web3.utils.toAscii(username).replace(/\\u0000/g, ''),\n              firstName: web3.utils.toAscii(firstName).replace(/\\u0000/g, ''),\n              lastName: web3.utils.toAscii(lastName).replace(/\\u0000/g, ''),\n              bio: bio,\n              gravatarEmail: gravatarEmail\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getUserInfo(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createUser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, username, firstName, lastName, bio, gravatarEmail) {\n    var controller, addresses, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return getInstance(web3.currentProvider, UserController);\n\n          case 2:\n            controller = _context2.sent;\n            _context2.prev = 3;\n            _context2.next = 6;\n            return web3.eth.getAccounts();\n\n          case 6:\n            addresses = _context2.sent;\n            console.log(addresses);\n            _context2.next = 10;\n            return controller.createUser(web3.utils.asciiToHex(username), web3.utils.asciiToHex(firstName), web3.utils.asciiToHex(lastName), bio, gravatarEmail, {\n              from: addresses[0]\n            });\n\n          case 10:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 14:\n            _context2.prev = 14;\n            _context2.t0 = _context2[\"catch\"](3);\n            console.error(\"Err: \", _context2.t0);\n\n          case 17:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[3, 14]]);\n  }));\n\n  return function createUser(_x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getLoggedInUserId = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3) {\n    var addresses, storage, userId;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            addresses = _context3.sent;\n\n            if (addresses) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 6:\n            _context3.next = 8;\n            return getInstance(web3.currentProvider, UserStorage);\n\n          case 8:\n            storage = _context3.sent;\n            _context3.next = 11;\n            return storage.addresses.call(addresses[0]);\n\n          case 11:\n            userId = _context3.sent;\n            return _context3.abrupt(\"return\", parseInt(userId));\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(\"Err:\", _context3.t0);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 15]]);\n  }));\n\n  return function getLoggedInUserId(_x9) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/users.js"],"names":["getInstance","UserStorage","UserController","getUserInfo","web3","userId","currentProvider","storage","profiles","call","profile","id","username","firstName","lastName","bio","gravatarEmail","parseInt","utils","toAscii","replace","createUser","controller","eth","getAccounts","addresses","console","log","asciiToHex","from","result","error","getLoggedInUserId"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,OAAO,IAAMC,WAAW;AAAA,sEAAG,iBAAOC,IAAP,EAAaC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHL,WAAW,CAACI,IAAI,CAACE,eAAN,EAAuBL,WAAvB,CADR;;AAAA;AACnBM,YAAAA,OADmB;AAAA;AAAA,mBAEHA,OAAO,CAACC,QAAR,CAAiBC,IAAjB,CAAsBJ,MAAtB,CAFG;;AAAA;AAEnBK,YAAAA,OAFmB;AAKvBC,YAAAA,EALuB,GAWrBD,OAXqB,CAKvBC,EALuB,EAMvBC,QANuB,GAWrBF,OAXqB,CAMvBE,QANuB,EAOvBC,SAPuB,GAWrBH,OAXqB,CAOvBG,SAPuB,EAQvBC,QARuB,GAWrBJ,OAXqB,CAQvBI,QARuB,EASvBC,GATuB,GAWrBL,OAXqB,CASvBK,GATuB,EAUvBC,aAVuB,GAWrBN,OAXqB,CAUvBM,aAVuB;;AAAA,gBAapBC,QAAQ,CAACN,EAAD,CAbY;AAAA;AAAA;AAAA;;AAAA,kBAaA,qBAbA;;AAAA;AAAA,6CAelB;AACLA,cAAAA,EAAE,EAAEM,QAAQ,CAACN,EAAD,CADP;AAELC,cAAAA,QAAQ,EAAER,IAAI,CAACc,KAAL,CAAWC,OAAX,CAAmBP,QAAnB,EAA6BQ,OAA7B,CAAqC,SAArC,EAAgD,EAAhD,CAFL;AAGLP,cAAAA,SAAS,EAAET,IAAI,CAACc,KAAL,CAAWC,OAAX,CAAmBN,SAAnB,EAA8BO,OAA9B,CAAsC,SAAtC,EAAiD,EAAjD,CAHN;AAILN,cAAAA,QAAQ,EAAEV,IAAI,CAACc,KAAL,CAAWC,OAAX,CAAmBL,QAAnB,EAA6BM,OAA7B,CAAqC,SAArC,EAAgD,EAAhD,CAJL;AAKLL,cAAAA,GAAG,EAAHA,GALK;AAMLC,cAAAA,aAAa,EAAbA;AANK,aAfkB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXb,WAAW;AAAA;AAAA;AAAA,GAAjB;AAyBP,OAAO,IAAMkB,UAAU;AAAA,uEAAG,kBAAOjB,IAAP,EAAaQ,QAAb,EAAuBC,SAAvB,EAAkCC,QAAlC,EAA4CC,GAA5C,EAAiDC,aAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACChB,WAAW,CAACI,IAAI,CAACE,eAAN,EAAuBJ,cAAvB,CADZ;;AAAA;AAClBoB,YAAAA,UADkB;AAAA;AAAA;AAAA,mBAIElB,IAAI,CAACmB,GAAL,CAASC,WAAT,EAJF;;AAAA;AAIhBC,YAAAA,SAJgB;AAKtBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AALsB;AAAA,mBAODH,UAAU,CAACD,UAAX,CACnBjB,IAAI,CAACc,KAAL,CAAWU,UAAX,CAAsBhB,QAAtB,CADmB,EAEnBR,IAAI,CAACc,KAAL,CAAWU,UAAX,CAAsBf,SAAtB,CAFmB,EAGnBT,IAAI,CAACc,KAAL,CAAWU,UAAX,CAAsBd,QAAtB,CAHmB,EAInBC,GAJmB,EAKnBC,aALmB,EAMnB;AACEa,cAAAA,IAAI,EAAEJ,SAAS,CAAC,CAAD;AADjB,aANmB,CAPC;;AAAA;AAOhBK,YAAAA,MAPgB;AAAA,8CAiBfA,MAjBe;;AAAA;AAAA;AAAA;AAmBtBJ,YAAAA,OAAO,CAACK,KAAR,CAAc,OAAd;;AAnBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAVV,UAAU;AAAA;AAAA;AAAA,GAAhB;AAuBP,OAAO,IAAMW,iBAAiB;AAAA,uEAAG,kBAAO5B,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAELA,IAAI,CAACmB,GAAL,CAASC,WAAT,EAFK;;AAAA;AAEvBC,YAAAA,SAFuB;;AAAA,gBAIxBA,SAJwB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAMPzB,WAAW,CAACI,IAAI,CAACE,eAAN,EAAuBL,WAAvB,CANJ;;AAAA;AAMvBM,YAAAA,OANuB;AAAA;AAAA,mBAORA,OAAO,CAACkB,SAAR,CAAkBhB,IAAlB,CAAuBgB,SAAS,CAAC,CAAD,CAAhC,CAPQ;;AAAA;AAOvBpB,YAAAA,MAPuB;AAAA,8CAStBY,QAAQ,CAACZ,MAAD,CATc;;AAAA;AAAA;AAAA;AAW7BqB,YAAAA,OAAO,CAACK,KAAR,CAAc,MAAd;;AAX6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBC,iBAAiB;AAAA;AAAA;AAAA,GAAvB","sourcesContent":["import { getInstance } from './contract-instance'\nimport UserStorage from './artifacts/UserStorage.json'\nimport UserController from \"./artifacts/UserController.json\"\n\nexport const getUserInfo = async (web3, userId) => {\n  const storage = await getInstance(web3.currentProvider, UserStorage)\n  const profile = await storage.profiles.call(userId)\n\n  const {\n    id, \n    username, \n    firstName, \n    lastName, \n    bio, \n    gravatarEmail, \n  } = profile\n  \n  if (!parseInt(id)) throw \"Couldn't find user!\"\n\n  return {\n    id: parseInt(id),\n    username: web3.utils.toAscii(username).replace(/\\u0000/g, ''),\n    firstName: web3.utils.toAscii(firstName).replace(/\\u0000/g, ''),\n    lastName: web3.utils.toAscii(lastName).replace(/\\u0000/g, ''),\n    bio,\n    gravatarEmail,\n  }\n}\n\nexport const createUser = async (web3, username, firstName, lastName, bio, gravatarEmail) => {\n  const controller = await getInstance(web3.currentProvider, UserController)\n\n  try {\n    const addresses = await web3.eth.getAccounts();\n    console.log(addresses)\n\n    const result = await controller.createUser(\n      web3.utils.asciiToHex(username),\n      web3.utils.asciiToHex(firstName),\n      web3.utils.asciiToHex(lastName),\n      bio,\n      gravatarEmail,\n      {\n        from: addresses[0]\n      }\n    );\n    return result;\n  } catch (err) {\n    console.error(\"Err: \", err)\n  }\n}\n\nexport const getLoggedInUserId = async (web3) => {\n  try {\n    const addresses = await web3.eth.getAccounts()\n\n    if (!addresses) return\n\n    const storage = await getInstance(web3.currentProvider, UserStorage)\n    const userId = await storage.addresses.call(addresses[0])\n\n    return parseInt(userId)\n  } catch (err) {\n    console.error(\"Err:\", err)\n  }\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport Web3 from \"web3\";\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var web3, _web, provider, _web2;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 13;\n                break;\n              }\n\n              web3 = new Web3(window.ethereum);\n              _context.prev = 2;\n              _context.next = 5;\n              return window.ethereum.enable();\n\n            case 5:\n              // Acccounts now exposed\n              resolve(web3);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](2);\n              reject(_context.t0);\n\n            case 11:\n              _context.next = 14;\n              break;\n\n            case 13:\n              // Legacy dapp browsers...\n              if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                _web = window.web3;\n                console.log(\"Injected web3 detected.\");\n                resolve(_web);\n              } // Fallback to localhost; use dev console port by default...\n              else {\n                  provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n                  _web2 = new Web3(provider);\n                  console.log(\"No web3 instance injected, using Local web3.\");\n                  resolve(_web2);\n                }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 8]]);\n    })));\n  });\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/get-web3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","enable","console","log","provider","providers","HttpProvider"],"mappings":";;;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,uEAAgC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE1BD,MAAM,CAACE,QAFmB;AAAA;AAAA;AAAA;;AAGtBC,cAAAA,IAHsB,GAGf,IAAIR,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAHe;AAAA;AAAA;AAAA,qBAMpBF,MAAM,CAACE,QAAP,CAAgBE,MAAhB,EANoB;;AAAA;AAO1B;AACAN,cAAAA,OAAO,CAACK,IAAD,CAAP;AAR0B;AAAA;;AAAA;AAAA;AAAA;AAU1BJ,cAAAA,MAAM,aAAN;;AAV0B;AAAA;AAAA;;AAAA;AAa9B;AACK,kBAAIC,MAAM,CAACG,IAAX,EAAiB;AACpB;AACMA,gBAAAA,IAFc,GAEPH,MAAM,CAACG,IAFA;AAGpBE,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAR,gBAAAA,OAAO,CAACK,IAAD,CAAP;AACD,eALI,CAML;AANK,mBAOA;AACGI,kBAAAA,QADH,GACc,IAAIZ,IAAI,CAACa,SAAL,CAAeC,YAAnB,CACf,uBADe,CADd;AAIGN,kBAAAA,KAJH,GAIU,IAAIR,IAAJ,CAASY,QAAT,CAJV;AAKHF,kBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAR,kBAAAA,OAAO,CAACK,KAAD,CAAP;AACD;;AA5B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AA8BD,GAhCD,CADc;AAAA,CAAhB;;AAmCA,eAAeP,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}
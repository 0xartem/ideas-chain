{"ast":null,"code":"import Web3 from \"web3\";\nimport contract from \"truffle-contract\";\n\nconst provider = () => {\n  if (typeof web3 !== 'undefined') {\n    window.web3 = new Web3(window.web3.currentProvider);\n\n    if (window.web3.currentProvider.isMetaMask === true) {\n      window.web3.eth.getAccounts((error, accounts) => {\n        if (accounts.length == 0) {// there is no active accounts in MetaMask\n        } else {// It's ok\n          }\n      });\n    } else {// Another web3 provider\n    }\n  } else {// No web 3 provider\n    }\n};\n\nexport const eth = new Web3(provider()).eth;\nexport const getInstance = artifact => {\n  const contracObj = contract(artifact);\n  contracObj.setProvider(provider());\n  return contracObj.deployed();\n};","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/provider.js"],"names":["Web3","contract","provider","web3","window","currentProvider","isMetaMask","eth","getAccounts","error","accounts","length","getInstance","artifact","contracObj","setProvider","deployed"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,MAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/BC,IAAAA,MAAM,CAACD,IAAP,GAAc,IAAIH,IAAJ,CAASI,MAAM,CAACD,IAAP,CAAYE,eAArB,CAAd;;AAEA,QAAID,MAAM,CAACD,IAAP,CAAYE,eAAZ,CAA4BC,UAA5B,KAA2C,IAA/C,EAAqD;AACjDF,MAAAA,MAAM,CAACD,IAAP,CAAYI,GAAZ,CAAgBC,WAAhB,CAA4B,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC7C,YAAIA,QAAQ,CAACC,MAAT,IAAmB,CAAvB,EAA0B,CACtB;AACH,SAFD,MAGK,CACD;AACH;AACJ,OAPD;AAQH,KATD,MASO,CACH;AACH;AACJ,GAfC,MAeK,CACH;AACH;AACA,CAnBD;;AAqBA,OAAO,MAAMJ,GAAG,GAAG,IAAIP,IAAJ,CAASE,QAAQ,EAAjB,EAAqBK,GAAjC;AAEP,OAAO,MAAMK,WAAW,GAAIC,QAAD,IAAc;AACvC,QAAMC,UAAU,GAAGb,QAAQ,CAACY,QAAD,CAA3B;AACAC,EAAAA,UAAU,CAACC,WAAX,CAAuBb,QAAQ,EAA/B;AACA,SAAOY,UAAU,CAACE,QAAX,EAAP;AACD,CAJM","sourcesContent":["import Web3 from \"web3\"\nimport contract from \"truffle-contract\"\n\nconst provider = () => {\n  if (typeof web3 !== 'undefined') {        \n    window.web3 = new Web3(window.web3.currentProvider)\n\n    if (window.web3.currentProvider.isMetaMask === true) {\n        window.web3.eth.getAccounts((error, accounts) => {\n            if (accounts.length == 0) {\n                // there is no active accounts in MetaMask\n            }\n            else {\n                // It's ok\n            }\n        });\n    } else {\n        // Another web3 provider\n    }\n} else {\n    // No web 3 provider\n}    \n}\n\nexport const eth = new Web3(provider()).eth\n\nexport const getInstance = (artifact) => {\n  const contracObj = contract(artifact)\n  contracObj.setProvider(provider())\n  return contracObj.deployed()\n}"]},"metadata":{},"sourceType":"module"}
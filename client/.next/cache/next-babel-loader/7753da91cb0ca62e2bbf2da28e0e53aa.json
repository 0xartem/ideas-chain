{"ast":null,"code":"import Web3 from \"web3\";\nimport contract from \"truffle-contract\";\n\nvar provider = function provider() {\n  // If the user has MetaMask:\n  // console.log(window.web3)\n  console.log(Web3.givenProvider);\n  console.log(Web3.currentProvider);\n\n  if (typeof window.web3 !== 'undefined') {\n    return window.web3.currentProvider;\n  } else {\n    console.error(\"You need to install MetaMask for this app to work!\");\n  }\n};\n\nexport var eth = new Web3(provider()).eth;\nexport var getInstance = function getInstance(artifact) {\n  var contracObj = contract(artifact);\n  contracObj.setProvider(provider());\n  return contracObj.deployed();\n};","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/provider.js"],"names":["Web3","contract","provider","console","log","givenProvider","currentProvider","window","web3","error","eth","getInstance","artifact","contracObj","setProvider","deployed"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrB;AACA;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,aAAjB;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACM,eAAjB;;AACA,MAAI,OAAOC,MAAM,CAACC,IAAd,KAAuB,WAA3B,EAAwC;AACtC,WAAOD,MAAM,CAACC,IAAP,CAAYF,eAAnB;AACD,GAFD,MAEO;AACLH,IAAAA,OAAO,CAACM,KAAR,CAAc,oDAAd;AACD;AACF,CAVD;;AAYA,OAAO,IAAMC,GAAG,GAAG,IAAIV,IAAJ,CAASE,QAAQ,EAAjB,EAAqBQ,GAAjC;AAEP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD,EAAc;AACvC,MAAMC,UAAU,GAAGZ,QAAQ,CAACW,QAAD,CAA3B;AACAC,EAAAA,UAAU,CAACC,WAAX,CAAuBZ,QAAQ,EAA/B;AACA,SAAOW,UAAU,CAACE,QAAX,EAAP;AACD,CAJM","sourcesContent":["import Web3 from \"web3\"\nimport contract from \"truffle-contract\"\n\nconst provider = () => {\n  // If the user has MetaMask:\n  // console.log(window.web3)\n  console.log(Web3.givenProvider)\n  console.log(Web3.currentProvider)\n  if (typeof window.web3 !== 'undefined') {\n    return window.web3.currentProvider\n  } else {\n    console.error(\"You need to install MetaMask for this app to work!\")\n  }\n}\n\nexport const eth = new Web3(provider()).eth\n\nexport const getInstance = (artifact) => {\n  const contracObj = contract(artifact)\n  contracObj.setProvider(provider())\n  return contracObj.deployed()\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Web3 from \"web3\";\nimport contract from \"truffle-contract\";\n\nconst provider = () => {\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum);\n\n    try {\n      window.ethereum.enable().then(function () {\n        console.log('User allowed access to the app');\n      });\n    } catch (e) {\n      console.log('User denied access to the app');\n    }\n\n    return web3.currentProvider;\n  } // Legacy DApp Browsers\n  else if (window.web3) {\n      web3 = new Web3(window.web3.currentProvider);\n    } // Non-DApp Browsers\n    else {\n        alert('You have to install MetaMask !');\n      }\n};\n\nexport const eth = new Web3(provider()).eth;\nexport const getInstance = artifact => {\n  const contracObj = contract(artifact);\n  contracObj.setProvider(provider());\n  return contracObj.deployed();\n};","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/provider.js"],"names":["Web3","contract","provider","window","ethereum","web3","enable","then","console","log","e","currentProvider","alert","eth","getInstance","artifact","contracObj","setProvider","deployed"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACrB,MAAIC,MAAM,CAACC,QAAX,EAAqB;AACnBC,IAAAA,IAAI,GAAG,IAAIL,IAAJ,CAASG,MAAM,CAACC,QAAhB,CAAP;;AACA,QAAI;AACDD,MAAAA,MAAM,CAACC,QAAP,CAAgBE,MAAhB,GAAyBC,IAAzB,CAA8B,YAAW;AACrCC,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH,OAFD;AAGF,KAJD,CAIE,OAAMC,CAAN,EAAS;AACTF,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD;;AACD,WAAOJ,IAAI,CAACM,eAAZ;AACF,GAVA,CAWD;AAXC,OAYI,IAAIR,MAAM,CAACE,IAAX,EAAiB;AAClBA,MAAAA,IAAI,GAAG,IAAIL,IAAJ,CAASG,MAAM,CAACE,IAAP,CAAYM,eAArB,CAAP;AACH,KAFI,CAGL;AAHK,SAIA;AACDC,QAAAA,KAAK,CAAC,gCAAD,CAAL;AACH;AACD,CApBD;;AAsBA,OAAO,MAAMC,GAAG,GAAG,IAAIb,IAAJ,CAASE,QAAQ,EAAjB,EAAqBW,GAAjC;AAEP,OAAO,MAAMC,WAAW,GAAIC,QAAD,IAAc;AACvC,QAAMC,UAAU,GAAGf,QAAQ,CAACc,QAAD,CAA3B;AACAC,EAAAA,UAAU,CAACC,WAAX,CAAuBf,QAAQ,EAA/B;AACA,SAAOc,UAAU,CAACE,QAAX,EAAP;AACD,CAJM","sourcesContent":["import Web3 from \"web3\"\nimport contract from \"truffle-contract\"\n\nconst provider = () => {\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum);\n    try { \n       window.ethereum.enable().then(function() {\n           console.log('User allowed access to the app');\n       });\n    } catch(e) {\n      console.log('User denied access to the app');\n    }\n    return web3.currentProvider\n }\n // Legacy DApp Browsers\n else if (window.web3) {\n     web3 = new Web3(window.web3.currentProvider);\n }\n // Non-DApp Browsers\n else {\n     alert('You have to install MetaMask !');\n }\n}\n\nexport const eth = new Web3(provider()).eth\n\nexport const getInstance = (artifact) => {\n  const contracObj = contract(artifact)\n  contracObj.setProvider(provider())\n  return contracObj.deployed()\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport Web3 from \"web3\";\nvar web3 = undefined;\n\nvar getWeb3 = function getWeb3() {\n  return new Promise(function (resolve, reject) {\n    if (web3 !== undefined) {\n      resolve(web3);\n    } // Wait for loading completion to avoid race conditions with web3 injection timing.\n\n\n    window.addEventListener(\"load\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var provider;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context.next = 13;\n                break;\n              }\n\n              web3 = (_readOnlyError(\"web3\"), new Web3(window.ethereum));\n              _context.prev = 2;\n              _context.next = 5;\n              return window.ethereum.enable();\n\n            case 5:\n              // Acccounts now exposed\n              resolve(web3);\n              _context.next = 11;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](2);\n              reject(_context.t0);\n\n            case 11:\n              _context.next = 14;\n              break;\n\n            case 13:\n              // Legacy dapp browsers...\n              if (window.web3) {\n                // Use Mist/MetaMask's provider.\n                web3 = (_readOnlyError(\"web3\"), window.web3);\n                console.log(\"Injected web3 detected.\");\n                resolve(web3);\n              } // Fallback to localhost; use dev console port by default...\n              else {\n                  provider = new Web3.providers.HttpProvider(\"http://127.0.0.1:8545\");\n                  web3 = (_readOnlyError(\"web3\"), new Web3(provider));\n                  console.log(\"No web3 instance injected, using Local web3.\");\n                  resolve(web3);\n                }\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 8]]);\n    })));\n  });\n};\n\nexport default getWeb3;","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/get-web3.js"],"names":["Web3","web3","undefined","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","enable","console","log","provider","providers","HttpProvider"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,IAAMC,IAAI,GAAGC,SAAb;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU;AAAA,SACd,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/B,QAAIL,IAAI,KAAKC,SAAb,EAAwB;AACtBG,MAAAA,OAAO,CAACJ,IAAD,CAAP;AACD,KAH8B,CAI/B;;;AACAM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,wEAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAE1BD,MAAM,CAACE,QAFmB;AAAA;AAAA;AAAA;;AAG5BR,cAAAA,IAAI,4BAAG,IAAID,IAAJ,CAASO,MAAM,CAACE,QAAhB,CAAH,CAAJ;AAH4B;AAAA;AAAA,qBAMpBF,MAAM,CAACE,QAAP,CAAgBC,MAAhB,EANoB;;AAAA;AAO1B;AACAL,cAAAA,OAAO,CAACJ,IAAD,CAAP;AAR0B;AAAA;;AAAA;AAAA;AAAA;AAU1BK,cAAAA,MAAM,aAAN;;AAV0B;AAAA;AAAA;;AAAA;AAa9B;AACK,kBAAIC,MAAM,CAACN,IAAX,EAAiB;AACpB;AACAA,gBAAAA,IAAI,4BAAGM,MAAM,CAACN,IAAV,CAAJ;AACAU,gBAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAP,gBAAAA,OAAO,CAACJ,IAAD,CAAP;AACD,eALI,CAML;AANK,mBAOA;AACGY,kBAAAA,QADH,GACc,IAAIb,IAAI,CAACc,SAAL,CAAeC,YAAnB,CACf,uBADe,CADd;AAIHd,kBAAAA,IAAI,4BAAG,IAAID,IAAJ,CAASa,QAAT,CAAH,CAAJ;AACAF,kBAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAP,kBAAAA,OAAO,CAACJ,IAAD,CAAP;AACD;;AA5B6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAhC;AA8BD,GAnCD,CADc;AAAA,CAAhB;;AAsCA,eAAeE,OAAf","sourcesContent":["import Web3 from \"web3\";\n\nconst web3 = undefined\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    if (web3 !== undefined) {\n      resolve(web3)\n    }\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}
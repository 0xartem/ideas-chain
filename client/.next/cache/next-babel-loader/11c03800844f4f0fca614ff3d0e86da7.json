{"ast":null,"code":"import { getInstance } from './contract-instance';\nimport UserStorage from './artifacts/UserStorage.json';\nimport UserController from \"./artifacts/UserController.json\";\nexport const getUserInfo = async (web3, userId) => {\n  console.log(web3.currentProvider);\n  const storage = await getInstance(web3.currentProvider, UserStorage);\n  const {\n    id,\n    username\n  } = await storage.profiles.call(userId);\n  return {\n    id: parseInt(id),\n    username: web3.utils.asciiToHex(username)\n  };\n};\nexport const createUser = async (web3, username) => {\n  console.log(web3.currentProvider);\n  const controller = await getInstance(web3.currentProvider, UserController);\n\n  try {\n    const addresses = await web3.eth.getAccounts();\n    console.log(addresses);\n    const result = await controller.createUser(web3.utils.asciiToHex(username), {\n      from: addresses[0]\n    });\n    return result;\n  } catch (err) {\n    console.error(\"Err: \", err);\n  }\n};","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/users.js"],"names":["getInstance","UserStorage","UserController","getUserInfo","web3","userId","console","log","currentProvider","storage","id","username","profiles","call","parseInt","utils","asciiToHex","createUser","controller","addresses","eth","getAccounts","result","from","err","error"],"mappings":"AAAA,SAASA,WAAT,QAA4B,qBAA5B;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,OAAO,MAAMC,WAAW,GAAG,OAAOC,IAAP,EAAaC,MAAb,KAAwB;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,eAAjB;AACA,QAAMC,OAAO,GAAG,MAAMT,WAAW,CAACI,IAAI,CAACI,eAAN,EAAuBP,WAAvB,CAAjC;AACA,QAAM;AAAES,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAmB,MAAMF,OAAO,CAACG,QAAR,CAAiBC,IAAjB,CAAsBR,MAAtB,CAA/B;AACA,SAAO;AACLK,IAAAA,EAAE,EAAEI,QAAQ,CAACJ,EAAD,CADP;AAELC,IAAAA,QAAQ,EAAEP,IAAI,CAACW,KAAL,CAAWC,UAAX,CAAsBL,QAAtB;AAFL,GAAP;AAID,CARM;AAUP,OAAO,MAAMM,UAAU,GAAG,OAAOb,IAAP,EAAaO,QAAb,KAA0B;AAClDL,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAI,CAACI,eAAjB;AACA,QAAMU,UAAU,GAAG,MAAMlB,WAAW,CAACI,IAAI,CAACI,eAAN,EAAuBN,cAAvB,CAApC;;AAEA,MAAI;AACF,UAAMiB,SAAS,GAAG,MAAMf,IAAI,CAACgB,GAAL,CAASC,WAAT,EAAxB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAYY,SAAZ;AAEA,UAAMG,MAAM,GAAG,MAAMJ,UAAU,CAACD,UAAX,CACnBb,IAAI,CAACW,KAAL,CAAWC,UAAX,CAAsBL,QAAtB,CADmB,EAEnB;AACEY,MAAAA,IAAI,EAAEJ,SAAS,CAAC,CAAD;AADjB,KAFmB,CAArB;AAMA,WAAOG,MAAP;AACD,GAXD,CAWE,OAAOE,GAAP,EAAY;AACZlB,IAAAA,OAAO,CAACmB,KAAR,CAAc,OAAd,EAAuBD,GAAvB;AACD;AACF,CAlBM","sourcesContent":["import { getInstance } from './contract-instance'\nimport UserStorage from './artifacts/UserStorage.json'\nimport UserController from \"./artifacts/UserController.json\"\n\nexport const getUserInfo = async (web3, userId) => {\n  console.log(web3.currentProvider)\n  const storage = await getInstance(web3.currentProvider, UserStorage)\n  const { id, username } = await storage.profiles.call(userId)\n  return {\n    id: parseInt(id),\n    username: web3.utils.asciiToHex(username)\n  }\n}\n\nexport const createUser = async (web3, username) => {\n  console.log(web3.currentProvider)\n  const controller = await getInstance(web3.currentProvider, UserController)\n\n  try {\n    const addresses = await web3.eth.getAccounts();\n    console.log(addresses)\n\n    const result = await controller.createUser(\n      web3.utils.asciiToHex(username),\n      {\n        from: addresses[0]\n      }\n    );\n    return result;\n  } catch (err) {\n    console.error(\"Err: \", err)\n  }\n}"]},"metadata":{},"sourceType":"module"}
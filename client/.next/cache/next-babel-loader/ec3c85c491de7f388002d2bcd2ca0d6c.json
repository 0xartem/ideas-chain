{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { getInstance } from './contract-instance';\nimport UserStorage from './artifacts/UserStorage.json';\nimport UserController from \"./artifacts/UserController.json\";\nexport var getUserInfo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(web3, userId) {\n    var storage, _yield$storage$profil, id, username;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(web3.currentProvider);\n            _context.next = 3;\n            return getInstance(web3.currentProvider, UserStorage);\n\n          case 3:\n            storage = _context.sent;\n            _context.next = 6;\n            return storage.profiles.call(userId);\n\n          case 6:\n            _yield$storage$profil = _context.sent;\n            id = _yield$storage$profil.id;\n            username = _yield$storage$profil.username;\n            return _context.abrupt(\"return\", {\n              id: parseInt(id),\n              username: web3.utils.hexToAscii(username).replace(/\\u0000/g, '')\n            });\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getUserInfo(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createUser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(web3, username, firstName, lastName, bio, gravatarEmail) {\n    var controller, addresses, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(web3.currentProvider);\n            _context2.next = 3;\n            return getInstance(web3.currentProvider, UserController);\n\n          case 3:\n            controller = _context2.sent;\n            _context2.prev = 4;\n            _context2.next = 7;\n            return web3.eth.getAccounts();\n\n          case 7:\n            addresses = _context2.sent;\n            console.log(addresses);\n            _context2.next = 11;\n            return controller.createUser(web3.utils.asciiToHex(username), web3.utils.asciiToHex(firstName), web3.utils.asciiToHex(lastName), bio, gravatarEmail, {\n              from: addresses[0]\n            });\n\n          case 11:\n            result = _context2.sent;\n            return _context2.abrupt(\"return\", result);\n\n          case 15:\n            _context2.prev = 15;\n            _context2.t0 = _context2[\"catch\"](4);\n            console.error(\"Err: \", _context2.t0);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 15]]);\n  }));\n\n  return function createUser(_x3, _x4, _x5, _x6, _x7, _x8) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getLoggedInUserId = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(web3) {\n    var addresses, storage, userId;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return web3.eth.getAccounts();\n\n          case 3:\n            addresses = _context3.sent;\n\n            if (addresses) {\n              _context3.next = 6;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 6:\n            _context3.next = 8;\n            return getInstance(UserStorage);\n\n          case 8:\n            storage = _context3.sent;\n            _context3.next = 11;\n            return storage.addresses.call(addresses[0]);\n\n          case 11:\n            userId = _context3.sent;\n            return _context3.abrupt(\"return\", parseInt(userId));\n\n          case 15:\n            _context3.prev = 15;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.error(\"Err:\", _context3.t0);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 15]]);\n  }));\n\n  return function getLoggedInUserId(_x9) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/home/daelankane/code/ed/ether/ideas-chain/client/web3/users.js"],"names":["getInstance","UserStorage","UserController","getUserInfo","web3","userId","console","log","currentProvider","storage","profiles","call","id","username","parseInt","utils","hexToAscii","replace","createUser","firstName","lastName","bio","gravatarEmail","controller","eth","getAccounts","addresses","asciiToHex","from","result","error","getLoggedInUserId"],"mappings":"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","sourcesContent":["import { getInstance } from './contract-instance'\nimport UserStorage from './artifacts/UserStorage.json'\nimport UserController from \"./artifacts/UserController.json\"\n\nexport const getUserInfo = async (web3, userId) => {\n  console.log(web3.currentProvider)\n  const storage = await getInstance(web3.currentProvider, UserStorage)\n  const { id, username } = await storage.profiles.call(userId)\n  return {\n    id: parseInt(id),\n    username: web3.utils.hexToAscii(username).replace(/\\u0000/g, '')\n  }\n}\n\nexport const createUser = async (web3, username, firstName, lastName, bio, gravatarEmail) => {\n  console.log(web3.currentProvider)\n  const controller = await getInstance(web3.currentProvider, UserController)\n\n  try {\n    const addresses = await web3.eth.getAccounts();\n    console.log(addresses)\n\n    const result = await controller.createUser(\n      web3.utils.asciiToHex(username),\n      web3.utils.asciiToHex(firstName),\n      web3.utils.asciiToHex(lastName),\n      bio,\n      gravatarEmail,\n      {\n        from: addresses[0]\n      }\n    );\n    return result;\n  } catch (err) {\n    console.error(\"Err: \", err)\n  }\n}\n\nexport const getLoggedInUserId = async (web3) => {\n  try {\n    const addresses = await web3.eth.getAccounts()\n\n    if (!addresses) return\n\n    const storage = await getInstance(UserStorage)\n    const userId = await storage.addresses.call(addresses[0])\n\n    return parseInt(userId)\n  } catch (err) {\n    console.error(\"Err:\", err)\n  }\n}"]},"metadata":{},"sourceType":"module"}